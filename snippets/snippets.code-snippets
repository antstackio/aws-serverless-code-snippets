{
  "S3 Bucket import with AWS SDK": {
    "prefix": "cas3",
    "body": ["const AWS = require('aws-sdk');", "const s3 = new AWS.S3();"],
    "description": " s3 import statement using AWS SDK"
  },

  "S3 Bucket List Object Template": {
    "prefix": "!s3List",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:Parameter_For_Bucket} = {",
      "    Bucket: \"${5:Bucket_name}\",",
      "    Prefix: \"${6:path_name}/\",",
      "  };",
      "  try {",
      "    const ${3:variable_to_store_data} = await s3",
      "      .listObjectV2({2:Parameter_For_Bucket})",
      "      .promise();",
      "    const ${4:variable_to_return} = ${3:variable_to_store_data}.Contents;",
      "    return ${4:variable_to_return};",
      "  } catch (error) {",
      "    console.error(\"Get Object from S3 :\", error);",
      "    return error;",
      "  }",
      "};",
      ""
    ],
    "description": "S3 Bucket List Object Template"
  },

  "S3 Bucket Get Object Template": {
    "prefix": "!s3Get",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:Bucket_params} = {",
      "    Bucket: \"${3:Bucket_Name}\",",
      "    Key: \"${4:file_path}\",",
      "  };",
      "  try {",
      "    const ${5:variable1_s3_data} = await s3.getObject(${2:Bucket_params}).promise();",
      "    console.log(\"S3 Data \", ${5:variable1_s3_data});",
      "    return ${5:variable1_s3_data};",
      "  } catch (error) {",
      "    console.error(\"Get Object from S3 :\", error);",
      "    return error;",
      "  }",
      "};",
      ""
    ],
    "description": "S3 Bucket Get Object Template"
  },
  "S3 Bucket Upload Object Template": {
    "prefix": "!s3Upload",
    "body": [
      "const ${0:function_name} = async () => {",
      "  const ${1:Bucket_params} = {",
      "    Bucket: \"${2:Bucket_Name}\",",
      "    Key: \"${3:file_path}\",",
      "    Expires: \"${5:bucket_expire_time}\",",
      "  };",
      "  try {",
      "    const ${4:variable1_s3_data} = await s3.putObject(${1:Bucket_params}).promise();",
      "    console.log(\"S3 Data \", ${4:variable_s3_data});",
      "    return ${4:variable_s3_data};",
      "  } catch (error) {",
      "    console.error(\"Put Object to S3 :\", error);",
      "    return error;",
      "  }",
      "};",
      ""
    ],
    "description": "S3 Bucket Upload Object Template"
  },
  "S3 Bucket Upload with Metadata Object Template": {
    "prefix": "!s3UWM",
    "body": [
      "const  ${0:function_name} = async () => {",
      "  const ${1:Bucket_params} = {",
      "    Bucket: \"${2:Bucket_Name}\",",
      "    Key: \"${3:file_path}\",",
      "    Expires: \"${4:bucket_expire_time}\",",
      "    Metadata: {",
      "      ${5:metadata1}: \"${6:value1}\",",
      "    },",
      "  };",
      "  try {",
      "    const ${7:variable1_s3_data} = await s3.putObject(${1:Bucket_params}).promise();",
      "    console.log(\"S3 Data \", ${7:variable1_s3_data});",
      "    return ${7:variable1_s3_data};",
      "  } catch (error) {",
      "    console.error(\"Put Object to S3 :\", error);",
      "    return error;",
      "  }",
      "};",
      "",
      ""
    ],
    "description": "S3 Bucket Upload with Metadata Object Template"
  },
  "S3 Bucket Copy Object from one Bucket to another Bucket Template": {
    "prefix": "!s3C",
    "body": [
      "const ${0:function_name} = async () => {",
      "  const ${1:Bucket_params} = {",
      "    Bucket: \"${2:Destination_Bucket_Name}\",",
      "    CopySource: \"${3:Source_Bucket_name}/\",",
      "    Key: \"${4:file_path}\",",
      "  };",
      "  try {",
      "    const ${5:variable1_s3_data} = await s3.copyObject(${1:Bucket_params}).promise();",
      "    console.log(\"Copied S3 Data \", ${5:variable1_s3_data});",
      "    return ${5:variable1_s3_data};",
      "  } catch (error) {",
      "    console.error(\"Copy Object to S3 :\", error);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "S3 Bucket Copy Object from one Bucket to another Bucket Template"
  },
  "s3 Create Bucket Template": {
    "prefix": "!s3Cr",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:Bucket_params} = {",
      "    Bucket: \"${3:Bucket_name}\",",
      "    CreateBucketConfiguration: {",
      "      LocationConstraint: \"${4:Bucket_Region_name}\",",
      "    },",
      "  };",
      "  try {",
      "    const ${5:variable_1} = await s3.createObject(${2:Bucket_params}).promise();",
      "    console.log(\"Bucket created in the selected region\");",
      "    return ${5:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in Creating Bucket: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "s3 Create Bucket Template"
  },
  "s3 Delete Bucket Template": {
    "prefix": "!s3D",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:Bucket_params} = {",
      "    Bucket: \"${3:Bucket_name}\",",
      "  };",
      "  try {",
      "    const ${4:variable_1} = await s3.deleteBucket(${2:Bucket_params}).promise();",
      "    console.log(\"Bucket deleted successfully......\");",
      "    return ${4:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in Delete Bucket: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "s3 Delete Bucket Template"
  },
  "s3 Bucket Delete Object Template": {
    "prefix": "!s3Do",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:Bucket_params} = {",
      "    Bucket: \"${3:Bucket_name}\",",
      "    Key: \"${4:File_path}\",",
      "  };",
      "  try {",
      "    const ${5:variable_1} = await s3.deleteObject(${2:Bucket_params}).promise();",
      "    console.log(\"Object deleted successfully......\");",
      "    return ${5:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in Deleting Object in the Bucket: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "s3 Bucket Delete Object Template"
  },
  "s3 Bucket Get Metadata Template": {
    "prefix": "!s3GM",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:Bucket_params} = {",
      "    Bucket: \"${3:Bucket_name}\",",
      "    Key: \"${4:File_path}\",",
      "  };",
      "  try {",
      "    const ${5:variable_1} = await s3.headObject(${2:Bucket_params}).promise();",
      "    console.log(",
      "      \"Metadata from object without returning object itself\",",
      "      ${5:variable_1}",
      "    );",
      "    return ${5:variable_1};",
      "  } catch (error) {",
      "    console.error(",
      "      \"Error in getting metadata of the object in the Bucket: \",",
      "      error.stack",
      "    );",
      "    return error;",
      "  }",
      "};",
      ""
    ],
    "description": "s3 Bucket Get Metadata Template"
  },
  "SQS import with AWS SDK": {
    "prefix": "casq",
    "body": ["const AWS = require('aws-sdk');", "const sqs = new AWS.SQS();"],
    "description": " sqs import statement using AWS SDK"
  },
  "SQS Create Queue Template": {
    "prefix": "!sqsC",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:SQS_Params} = {",
      "    QueueName: \"${3:Queue_name}\",",
      "    Attributes: {",
      "      ${4:QueueAttributeName_1}: \"${5:Value}\",",
      "    },",
      "    Tags: {",
      "      ${6:Tag_key}: \"${7:Tag_Value}\",",
      "    },",
      "  };",
      "  try {",
      "    const ${8:variable_1} = await sqs.createQueue(${2:SQS_Params}).promise();",
      "    console.log(\"SQS Queue is created successfully....\", ${8:variable_1});",
      "    return ${8:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SQS Queue creation: \", error.stack);",
      "    return error;",
      "  }",
      "};",
      ""
    ],
    "description": "SQS Create Queue Template"
  },
  "SQS Purge Queue Template": {
    "prefix": "!sqsP",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:SQS_Params} = {",
      "    QueueUrl: \"${3:Queue_name}\",",
      "  };",
      "  try {",
      "    const ${4:variable_1} = await sqs.purgeQueue(${2:SQS_Params}).promise();",
      "    console.log(\"SQS Queue is purged successfully....\", ${4:variable_1});",
      "    return ${4:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SQS purging queue: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "SQS Purge Queue Template"
  },
  "SQS Send Message Template": {
    "prefix": "!sqsS",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:SQS_Params} = {",
      "    MessageBody: \"${3:Message_details}\",",
      "    QueueUrl: \"${4:Queue_name}\",",
      "  };",
      "  try {",
      "    const ${5:variable_1} = await sqs.sendMessage(${2:SQS_Params}).promise();",
      "    console.log(\"SQS Message send successfully....\", ${5:variable_1});",
      "    return ${5:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SQS send message: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "SQS Send Message Template"
  },
  "SQS Receive Message Template": {
    "prefix": "!sqsR",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:SQS_Params} = {",
      "    QueueUrl: \"${3:Queue_name}\",",
      "    MaxNumberOfMessages: \"${4:MaxNumberOfMessages_value}\",",
      "    ReceiveRequestAttemptId: \"${5:ReceiveRequestAttemptId_value}\",",
      "    VisibilityTimeout: \"${6:visibilityTimeout_value}\",",
      "    WaitTimeSeconds: \"${7:waitTimeSeconds_value}\",",
      "  };",
      "  try {",
      "    const ${8:variable_1} = await sqs.receiveMessage(${2:SQS_Params}).promise();",
      "    console.log(\"SQS Message received successfully....\", ${8:variable_1});",
      "    return ${8:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SQS receive message: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "SQS Receive Message Template"
  },
  "SQS list queues Template": {
    "prefix": "!sqsL",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:SQS_Params} = {",
      "    MaxResults: \"${3:MaxResults_value}\",",
      "    NextToken: \"${4:NextToken_value}\",",
      "    QueueNamePrefix: \"${5:QueueNamePrefix_value}\",",
      "  };",
      "  try {",
      "    const ${6:variable_1} = await sqs.listQueues(${2:SQS_Params}).promise();",
      "    console.log(\"SQS listed queues successfully....\", ${6:variable_1});",
      "    return ${6:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SQS list queues: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "SQS list queues Template"
  },
  "SQS get queue URL Template": {
    "prefix": "!sqsG",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:SQS_Params} = {",
      "    QueueName: \"${3:QueueName_value}\",",
      "    QueueOwnerAWSAccountId: \"${4:QueueOwnerAWSAccountId_value}\",",
      "  };",
      "  try {",
      "    const ${5:variable_1} = await sqs.getQueueUrl(${2:SQS_Params}).promise();",
      "    console.log(\"SQS Get QueueUrl successfully....\", ${5:variable_1});",
      "    return ${5:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SQS Get queueUrl: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "SQS get queue URL Template"
  },
  "SQS Delete Message Template": {
    "prefix": "!sqsDM",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const  ${2:SQS_Params} = {",
      "    QueueUrl: \"${3:QueueUrl_value}\",",
      "    ReceiptHandle: \" ${4: ReceiptHandle_value}\",",
      "  };",
      "  try {",
      "    const ${5:variable_1} = await sqs.deleteMessage(${2:SQS_Params}).promise();",
      "    console.log(\"SQS message deleted successfully....\", ${5:variable_1});",
      "    return ${5:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SQS Delete Message: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "SQS Delete Message Template"
  },
  "SQS Delete Queue Template": {
    "prefix": "!sqsDQ",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:SQS_Params} = {",
      "    QueueUrl: \"${3:QueueUrl_value}\",",
      "  };",
      "  try {",
      "    const  ${4:variable_1} = await sqs.deleteQueue(${2:SQS_Params}).promise();",
      "    console.log(\"SQS Queue deleted successfully....\",  ${4:variable_1});",
      "    return  ${4:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SQS Delete Queue: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "SQS Delete Queue Template"
  },
  "SQS DeadLetterSourceQueue Template": {
    "prefix": "!sqsDLQ",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:SQS_Params} = {",
      "    QueueUrl: \"${3:QueueUrl_value}\",",
      "    MaxResults: \"${4:MaxResults_value}\",",
      "    NextToken: \"${5:NextToken_value}\",",
      "  };",
      "  try {",
      "    const ${6:variable_1} = await sqs",
      "      .listDeadLetterSourceQueues(${2:SQS_Params})",
      "      .promise();",
      "    console.log(\"SQS Dead LetterSourceQueues lists\", ${6:variable_1});",
      "    return ${6:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SQS ListDeadLetterSourceQueues: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "SQS DeadLetterSourceQueue Template"
  },
  "SNS import with AWS SDK": {
    "prefix": "casn",
    "body": ["const AWS = require('aws-sdk');", "const sns = new AWS.SNS();"],
    "description": " sns import statement using AWS SDK"
  },

  "SNS Create Topic Template": {
    "prefix": "!snsCT",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:SNS_Params} = {",
      "    Name: \"${3:Name_value}\",",
      "    Attributes: {",
      "      ${4:Attributes_Name}: \"${5:Attributes_value}\",",
      "    },",
      "    Tags: [{ ${6:Tags_Key_1}: \"${7:Tags_Value_1}\" }],",
      "  };",
      "  try {",
      "    const ${8:variable_1} = await sns.createTopic(${2:SNS_Params}).promise();",
      "    console.log(\"SNS Topic created successfully...\", ${8:variable_1});",
      "    return ${8:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SNS Create Topic: \", error.stack);",
      "    return error;",
      "  }",
      "};",
      ""
    ],
    "description": "SNS Create Topic Template"
  },
  "SNS Get Topic Attribute Template": {
    "prefix": "!snsGT",
    "body": [
      "const  ${1:function_name} = async () => {",
      "  const ${2:SNS_Params} = {",
      "    TopicArn: \"${3:TopicArn_value}\",",
      "  };",
      "  try {",
      "    const ${4:variable_1} = await sns.getTopicAttributes(${2:SNS_Params}).promise();",
      "    console.log(\"Get Topic Attributes\", ${4:variable_1});",
      "    return ${4:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SNS Get TopicAttribute: \", error.stack);",
      "    return error;",
      "  }",
      "};",
      ""
    ],
    "description": "SNS Get Topic Attribute Template"
  },
  "SNS ListTopics Template": {
    "prefix": "!snsLT",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:SNS_Params} = {",
      "    NextToken: \"${3:NextToken_value}\",",
      "  };",
      "  try {",
      "    const ${4:variable_1} = await sns.listTopics(${2:SNS_Params}).promise();",
      "    console.log(\"List Topics\", ${4:variable_1});",
      "    return ${4:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SNS List Topics: \", error.stack);",
      "    return error;",
      "  }",
      "};",
      "",
      ""
    ],
    "description": "SNS ListTopics Template"
  },
  "SNS ListSubscriptions Template": {
    "prefix": "!snsLS",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:SNS_Params} = {",
      "    NextToken: \"${3:NextToken_value}\",",
      "  };",
      "  try {",
      "    const ${4:variable_1} = await sns.listSubscriptions(${2:SNS_Params}).promise();",
      "    console.log(\"List Subscriptions\", ${4:variable_1});",
      "    return ${4:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SNS List Subscriptions: \", error.stack);",
      "    return error;",
      "  }",
      "};",
      "",
      ""
    ],
    "description": "SNS ListSubscriptions Template"
  },
  "SNS ConfirmSubscriptions Template": {
    "prefix": "!snsCS",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:SNS_Params} = {",
      "    Token: \"${3:Token_value}\",",
      "    TokenArn: \"${4:TokenArn_value}\",",
      "    AuthenticateOnUnsubscribe: \"${5:AuthenticateOnUnsubscribe_value}\",",
      "  };",
      "  try {",
      "    const ${6:variable_1} = await sns.confirmSubscription(${2:SNS_Params}).promise();",
      "    console.log(\"Confirm Subscriptions\", ${6:variable_1});",
      "    return ${6:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SNS Confirm Subscriptions: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "SNS ConfirmSubscriptions Template"
  },
  "SNS Create Platform Application Template": {
    "prefix": "!snsCPA",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:SNS_Params} = {",
      "    Attributes: {",
      "      ${3:Attribute_key}: \"${4:Attribute_value}\",",
      "    },",
      "    Name: \"${5:Name_value}\",",
      "    Platform: \" ${6: Platform_value}\",",
      "  };",
      "  try {",
      "    const ${7:variable_1} = await sns",
      "      .createPlatformApplication(${2:SNS_Params})",
      "      .promise();",
      "    console.log(\"Create Platform application\", ${7:variable_1});",
      "    return ${7:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SNS Create Platform Application: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "SNS Create Platform Application Template"
  },
  "SNS Delete Topic Template": {
    "prefix": "!snsDT",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:SNS_Params} = {",
      "    TopicArn: \"${3:TopicArn_value}\",",
      "  };",
      "  try {",
      "    const  ${4:variable_1} = await sns.deleteTopic(${2:SNS_Params}).promise();",
      "    console.log(\"SNS Topic deleted Successfully\",  ${4:variable_1});",
      "    return  ${4:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SNS Delete Topic: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "SNS Delete Topic Template"
  },
  "SNS Delete Platform Application Template": {
    "prefix": "!snsDPA",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const  ${2:SNS_Params} = {",
      "    PlatformApplicationArn: \" ${3: PlatformApplicationArn_value}\",",
      "  };",
      "  try {",
      "    const  ${4:variable_1} = await sns",
      "      .deletePlatformApplication( ${2:SNS_Params})",
      "      .promise();",
      "    console.log(\"SNS Platform Application deleted Successfully\",  ${4:variable_1});",
      "    return  ${4:variable_1};",
      "  } catch (error) {",
      "    console.error(\"Error in SNS Delete Platform Application: \", error.stack);",
      "    return error;",
      "  }",
      "};"
    ],
    "description": "SNS Delete Platform Application Template"
  },
  "DynamoDB import with AWS SDK": {
    "prefix": "cadb",
    "body": [
      "const AWS = require('aws-sdk');",
      "const db = new AWS.DynamoDB();"
    ],
    "description": " dynamodb import statement using AWS SDK"
  },
  "DynamoDb create table ": {
    "prefix": "!dbC",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:params} = {",
      "    TableName: \"`${3:Table_name}`\",",
      "    KeySchema: [",
      "      {",
      "        AttributeName: \"`${4:AttributeName}`\",",
      "        KeyType: \"`${5:KeyType}`\",",
      "      },",
      "      {",
      "        AttributeName: \"`${6:AttributeName}`\",",
      "        KeyType: \"`${7:KeyType}`\",",
      "      },",
      "    ],",
      "    AttributeDefinitions: [",
      "      {",
      "        AttributeName: \"`${8:AttributeName}`\",",
      "        AttributeType: \"`${9:AttributeType}`\",",
      "      },",
      "      {",
      "        AttributeName: \"`${10:AttributeName}`\",",
      "        AttributeType: \"`${11:AttributeType}`\",",
      "      },",
      "    ],",
      "    ProvisionedThroughput: {",
      "      ReadCapacityUnits: `${12:ReadCapacityUnits}`,",
      "      WriteCapacityUnits: `${13:WriteCapacityUnits}`,",
      "    },",
      "  };",
      "",
      "  try {",
      "    const ${14:variable} = await db.createTable(${2:params}).promise();",
      "    return {",
      "      statusCode: 201,",
      "      body: JSON.stringify({",
      "        db_data: ${14:variable},",
      "        message: \"data created successfully in the db\",",
      "      }),",
      "    };",
      "  } catch (error) {",
      "    return {",
      "      statusCode: 500,",
      "      body: JSON.stringify({",
      "        error_message: error.message,",
      "        message: \"Something went wrong! check it out!\",",
      "      }),",
      "    };",
      "  }",
      "};"
    ],
    "description": "DynamoDb create table "
  },
  "Normal Update dynamodb table ": {
    "prefix": "!dbNP",
    "body": [
      "const dbClient = new AWS.DynamoDB.DocumentClient();",
      "",
      "const ${1:function_name} = async () => {",
      "  const ${2:params} = {",
      "    TableName: \"`${3:TableName}`\",",
      "    Item: {",
      "      \"`${4:variable_1}`\": \"`${5:variable_2}`\",",
      "      \"`${6:variable_3}`\": \"`${7:variable_4}`\",",
      "    },",
      "  };",
      "",
      "  try {",
      "    const ${8:function_data} = await dbClient.put(${2:params}).promise();",
      "    return {",
      "      statusCode: 200,",
      "      body: JSON.stringify({",
      "        db_data: ${8:function_data},",
      "        message: \"data updated successfully in the db\",",
      "      }),",
      "    };",
      "  } catch (error) {",
      "    return {",
      "      statusCode: 500,",
      "      body: JSON.stringify({",
      "        error_message: error.message,",
      "        message: \"Unable to add an item to the table! check it out!\",",
      "      }),",
      "    };",
      "  }",
      "};"
    ],
    "description": "Normal Update dynamodb table "
  },
  "Normal Update without condition dynamodb table ": {
    "prefix": "!dbUU",
    "body": [
      "const dbClient = new AWS.DynamoDB.DocumentClient();",
      "",
      "const ${1:function_name} = async () => {",
      "  const ${2:params} = {",
      "    TableName: \"`${3:TableName}`\",",
      "    Key: {",
      "      \"`${4:TableVariable}`\": \"`${5:tableValue}`\",",
      "      \"`${6:TableVariable}`\": \"${7:ValueVariable}\",",
      "    },",
      "    UpdateExpression: \"`${8:UpdateExpression}`\",",
      "    ExpressionAttributeValues: {",
      "      \"`${9:ExpressionAttributeValue}`\", // \"key\":\"value\"",
      "    },",
      "    ReturnValue: \"UPDATED_NEW\",",
      "  };",
      "",
      "  try {",
      "    const ${10:variable} = await dbClient.update(${2:params}).promise();",
      "    return {",
      "      statusCode: 200,",
      "      body: JSON.stringify({",
      "        db_data: ${10:variable},",
      "        message: \"data updated successfully in the db\",",
      "      }),",
      "    };",
      "  } catch (error) {",
      "    return {",
      "      statusCode: 500,",
      "      body: JSON.stringify({",
      "        error_message: error.message,",
      "        message: \"Unable to update the table, check it out!\",",
      "      }),",
      "    };",
      "  }",
      "};"
    ],
    "description": "Normal Update without condition dynamodb table "
  },
  "Normal Update  with condition dynamodb table ": {
    "prefix": "!dbCU",
    "body": [
      "const dbClient = new AWS.DynamoDB.DocumentClient();",
      "",
      "const ${1:function_name} = async () => {",
      "  const ${2:params} = {",
      "    TableName: \"`${3:TableName}`\",",
      "    Key: {",
      "      \"`${4:TableVariable}`\": \"`${5:tableValue}`\",",
      "      \"`${6:TableVariable}`\": \"${7:ValueVariable}\",",
      "    },",
      "    UpdateExpression: \"`${8:UpdateExpression}`\",",
      "    ConditionExpression: \"`${9:ConditionExpressionValue}`\"",
      "    ExpressionAttributeValues: {",
      "      \"`${10:ExpressionAttributeValue}`\", // \"key\":\"value\"",
      "    },",
      "    ReturnValue: \"UPDATED_NEW\",",
      "  };",
      "",
      "  try {",
      "    const ${11:variable} = await dbClient.update(${2:params}).promise();",
      "    return {",
      "      statusCode: 200,",
      "      body: JSON.stringify({",
      "        db_data: ${11:variable},",
      "        message: \"data updated successfully in the db\",",
      "      }),",
      "    };",
      "  } catch (error) {",
      "    return {",
      "      statusCode: 500,",
      "      body: JSON.stringify({",
      "        error_message: error.message,",
      "        message: \"Unable to update the table, check it out!\",",
      "      }),",
      "    };",
      "  }",
      "};"
    ],
    "description": "Normal Update  with condition dynamodb table "
  },
  "Querying table with condition dynamodb table ": {
    "prefix": "!dbQ",
    "body": [
      "const dbClient = new AWS.DynamoDB.DocumentClient();",
      "",
      "const ${1:function_name} = async () => {",
      "  const ${2:params} = {",
      "    TableName: \"`${3:TableName}`\",",
      "    KeyConditionExpression: \"`${4:ConditionExpression}`\",",
      "    FilterExpression: '${5:FilterExpressionValues}',",
      "    ExpressionAttributeValues: {",
      "      \"`${6:ExpressionAttributeValue}`\", // \"key\":\"value\"",
      "    },",
      "  };",
      "",
      "  try {",
      "    const ${7:variable} = await dbClient.query(${2:params}).promise();",
      "    return {",
      "      statusCode: 200,",
      "      body: JSON.stringify({",
      "        db_data: ${7:variable}.Items,",
      "        message: \"Successfully Queried the data from the table\",",
      "      }),",
      "    };",
      "  } catch (error) {",
      "    return {",
      "      statusCode: 500,",
      "      body: JSON.stringify({",
      "        error_message: error.message,",
      "        message: \"Unable to query data from the table, check it out!\",",
      "      }),",
      "    };",
      "  }",
      "};"
    ],
    "description": "Querying table with condition dynamodb table "
  },
  "Delete item from the table ": {
    "prefix": "!dbDI",
    "body": [
      "const dbClient = new AWS.DynamoDB.DocumentClient();",
      "",
      "const ${1:function_name} = async () => {",
      "  const ${2:params} = {",
      "    TableName: \"`${3:TableNameValue}`\",",
      "    Key: {",
      "     '${4:key}': \"`${5:values}`\",",
      "    }",
      "  };",
      "  try {",
      "    const ${6:variable} = await dbClient.delete(${2:params}).promise();",
      "    return {",
      "      statusCode: 204,",
      "      body: JSON.stringify({",
      "        db_data: ${6:variable},",
      "        message: \"data deleted successfully from the db\",",
      "      }),",
      "    };",
      "  } catch (error) {",
      "    return {",
      "      statusCode: 500,",
      "      body: JSON.stringify({",
      "        error_message: error.message,",
      "        message: \"Unable to delete data from the table, check it out!\",",
      "      }),",
      "    };",
      "  }",
      "};",
      ""
    ],
    "description": "Delete item from the table "
  },
  "Get item from the table ": {
    "prefix": "!dbG",
    "body": [
      "const dbClient = new AWS.DynamoDB.DocumentClient();",
      "",
      "const ${1:function_name} = async () => {",
      "  const ${2:params} = {",
      "    TableName: \"`${3:TableNameValue}`\",",
      "    Key: {",
      "     '${4:key}': \"`${5:values}`\",",
      "    }",
      "  };",
      "",
      "  try {",
      "    const ${6:variable} = await dbClient.get(${2:params}).promise();",
      "    return {",
      "      statusCode: 200,",
      "      body: JSON.stringify({",
      "        db_data: ${6:variable}.Item,",
      "        message: \"Successfully Retrieved item from DynamoDB table\",",
      "      }),",
      "    };",
      "  } catch (error) {",
      "    return {",
      "      statusCode: 500,",
      "      body: JSON.stringify({",
      "        error_message: error.message,",
      "        message: \"Unable to get item from the table, check it out!\",",
      "      }),",
      "    };",
      "  }",
      "};",
      "",
      ""
    ],
    "description": "Get item from the table "
  },
  "Scan table to get the data": {
    "prefix": "!dbS",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:params} = {",
      "    TableName: \"`${3:TableNameValue}`\",",
      "    FilterExpression: \"`${4:FilterExpressionValue}`\",",
      "    ExpressionAttributeValues: {",
      "      \"`${5:ExpressionAttributeValue}`\":\"`${6:ExpressionAttributeValue}`\"",
      "    },",
      "    ProjectionExpression: \"`${7:ProjectionExpressionValue}`\",",
      "  };",
      "",
      "  try {",
      "    const ${8:variable} = await db.scan(${2:params}).promise();",
      "    return {",
      "      statusCode: 200,",
      "      body: JSON.stringify({",
      "        db_data: ${8:variable},",
      "        message: \"Successfully Retrieved data from DynamoDB table\",",
      "      }),",
      "    };",
      "  } catch (error) {",
      "    return {",
      "      statusCode: 500,",
      "      body: JSON.stringify({",
      "        error_message: error.message,",
      "        message: \"Unable to retrieve data from the table, check it out!\",",
      "      }),",
      "    };",
      "  }",
      "};",
      "",
      ""
    ],
    "description": "Scan table to get the data"
  },
  "Describe selected table ": {
    "prefix": "!dbDES",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:params} = {",
      "    TableName: \"`${3:TableNameValue}`\",",
      "  };",
      "",
      "  try {",
      "    const ${4:variable} = await db.describeTable(${2:params}).promise();",
      "    return {",
      "      statusCode: 200,",
      "      message: JSON.stringify({",
      "        data: ${4:variable}.Table.KeySchema,",
      "        message: \"Successfully retrieved the selected table's descriptions\",",
      "      }),",
      "    };",
      "  } catch (err) {",
      "    return {",
      "      statusCode: 500,",
      "      message: JSON.stringify({",
      "        error: err.message,",
      "        message: \"Unable to retrieve the selected table's descriptions\",",
      "      }),",
      "    };",
      "  }",
      "};",
      ""
    ],
    "description": "Describe selected table "
  },
  "List of all table ": {
    "prefix": "!dbLT",
    "body": [
      "const ${1:function_name} = async () => {",
      "  try {",
      "    const ${2:variable} = await db.listTables({ Limit: ${3:variable} }).promise();",
      "    return {",
      "      statusCode: 200,",
      "      message: JSON.stringify({",
      "        data: ${2:variable}.TableNames,",
      "        message: \"Successfully retrieved the table list\",",
      "      }),",
      "    };",
      "  } catch (err) {",
      "    return {",
      "      statusCode: 500,",
      "      message: JSON.stringify({",
      "        error: err.message,",
      "        message: \"Unable to retrieve the table list\",",
      "      }),",
      "    };",
      "  }",
      "};",
      ""
    ],
    "description": "List of all table "
  },
  "Delete Table": {
    "prefix": "!dbDT",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:params} = {",
      "    TableName: ${3:TableNameValues},",
      "  };",
      "  try {",
      "    const ${4:variable} = await db.deleteTable(${2:params}).promise();",
      "    return {",
      "      statusCode: 204,",
      "      message: JSON.stringify({",
      "        data: ${4:variable},",
      "        message: \"Successfully deleted the table\",",
      "      }),",
      "    };",
      "  } catch (err) {",
      "    return {",
      "      statusCode: 500,",
      "      message: JSON.stringify({",
      "        error: err.message,",
      "        message: \"Error: Table not found\",",
      "      }),",
      "    };",
      "  }",
      "};",
      ""
    ],
    "description": "Delete Table"
  },
  "StepFunctions import with AWS SDK": {
    "prefix": "!sfCSF",
    "body": [
      "const AWS = require('aws-sdk');",
      "const stepfunctions = new AWS.StepFunctions();"
    ],
    "description": " StepFunctions import statement using AWS SDK"
  },
  "Create Activity in StepFunctions": {
    "prefix": "!sfCA",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:params} = {",
      "         name: \"`${3:activity_name}`\",",
      "  };",
      "  try {",
      "    const ${4:variable} = await stepfunctions.createActivity(${2:params}).promise();",
      "    return {",
      "      statusCode: 204,",
      "      message: JSON.stringify({",
      "        data: ${5:variable},",
      "        message: \"Successfully created Activity in StepFunctions\",",
      "      }),",
      "    };",
      "  } catch (err) {",
      "    return {",
      "      statusCode: 500,",
      "      message: JSON.stringify({",
      "        error: err.message,",
      "        message: \"Error: Activity cannot be created \",",
      "      }),",
      "    };",
      "  }",
      "};",
      ""
    ],
    "description": "Create an Activity in StepFunctions"
  },
  "Creates a State Machine in StepFunctions": {
    "prefix": "!sfSM",
    "body": [
      "const ${1:function_name} = async () => {",
      "  const ${2:params} = {",
      "         definition: \"`${3:definition}`\", ",
      "         name: \"`${4:name}`\",",
      "         roleArn: \"`${5:arn}`\",   ",
      "         type: STANDARD | EXPRESS",
      "  };",
      "  try {",
      "    const ${6:variable} = await stepfunctions.createStateMachine(${2:params}).promise();",
      "    return {",
      "      statusCode: 204,",
      "      message: JSON.stringify({",
      "        data: ${6:variable},",
      "        message: \"Successfully created a State Machine\",",
      "      }),",
      "    };",
      "  } catch (err) {",
      "    return {",
      "      statusCode: 500,",
      "      message: JSON.stringify({",
      "        error: err.message,",
      "        message: \"Error: State Machine cannot be created \",",
      "      }),",
      "    };",
      "  }",
      "};",
      ""
    ],
    "description": "Create State Machine in StepFunctions"
  }
}
